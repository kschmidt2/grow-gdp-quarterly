Highcharts.setOptions({lang:{thousandsSep:","}});let chartIdGDPQuarterly=document.getElementById("chart-container-gdp-quarterly");function drawHighcharts(){Highcharts.chart(chartIdGDPQuarterly,{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1EY_-S-brWEy16L4LvDP7_Y8JNaq2XahWj2dUV7FIgjc",googleSpreadsheetWorksheet:1},plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"},formatter:function(){var t="";return"Jan"==Highcharts.dateFormat("%b",this.value)&&(t+="Q4"),"Apr"==Highcharts.dateFormat("%b",this.value)&&(t+="Q1"),"Jul"==Highcharts.dateFormat("%b",this.value)&&(t+="Q2"),"Oct"==Highcharts.dateFormat("%b",this.value)&&(t+="Q3"),t="Jan"==Highcharts.dateFormat("%b",this.value)?t+" '"+(Highcharts.dateFormat("%y",this.value)-1):t+" '"+Highcharts.dateFormat("%y",this.value)}},tickLength:5,type:"datetime"},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},tickAmount:6},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,formatter:function(){return"GDP change: <b>"+this.y+"%</b>"}},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}})}setTimeout(function(){if(""===chartIdGDPQuarterly.innerHTML){document.getElementsByClassName("chart-area-gdp-quarterly");for(var t=0;t<chartArea.length;t++)chartArea[t].style.display="none";document.getElementById("chart-fallback").innerHTML+='<img src="https://fm-static.cnbc.com/awsmedia/chart/2019/10/08/chart-error_wide.1570569331252.png" style="width: 100%;max-width:660px">'}},500),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
